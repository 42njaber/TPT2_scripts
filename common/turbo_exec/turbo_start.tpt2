
:name turbo start

; This script registers a script for turbo exec, and exits as soon it confirms
; turbo exec is running.
; When executing this script, it is highly advised to execute it using
; `execute(sync)` as among other things, this guarantees that the cycle counter
; has started and that it is safe to overwrite `turbo.cycles.max` with a new
; maximum value


; This variable is used to track how many scripts are using turbo exec,
; it's incremented each time `turbo start` is called, and decremented
; everytime `turbo stop` is called, when it reaches 0, turbo is stopped
; and waits for the next script to register.
:global int turbo.register

; This variable is used to recieve state information from `<turbo> register`.
:global int turbo.state

; Because `<turbo> register` cannot start turbo on a 0-frame delay for multiple
; reasons, the start script launches its own turbo loop which is gonna run for
; a few cycles and guarantee frame continuity.
execute("TE2.0 buffer loop")

turbo.register += 1 ; Increment the registry counter

; Save some undefined behavior from other scripts, this should guarentee
; turbo exec is up and is gonna keep running until the next call
; to `turbo stop`.
; `goto` is being used here to stay consistent with `turbo stop`.
wait:
goto(if(turbo.state == 1, end, wait))

; Finishing the script with a noop is important, else the script will get
; stuck on the `goto` even after turbo finished.
wait(0.0)
end:
